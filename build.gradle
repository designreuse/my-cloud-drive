buildscript {
    ext {
        springBootVersion = "1.3.0.M5"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.flywaydb:flyway-core:3.2.1"
        classpath "org.flywaydb:flyway-gradle-plugin:3.2.1"
        classpath "org.postgresql:postgresql:9.4-1201-jdbc41"

        classpath files("src/main/resources")
     }
}

apply plugin: "java"
apply plugin: "spring-boot"
apply plugin: "org.flywaydb.flyway"

jar {
    baseName = "my-cloud-drive"
    version = "0.0.1-SNAPSHOT"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    //compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    //compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.codehaus.groovy:groovy-all:2.4.5"
    
    compile "commons-lang:commons-lang:2.6"
    compile "org.apache.hadoop:hadoop-client:2.7.1"
    compile "commons-io:commons-io:2.4"
    compile "org.flywaydb:flyway-core:3.2.1"
    compile "org.postgresql:postgresql:9.4-1201-jdbc41"

    
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "junit:junit:4.11"
    compile("org.mockito:mockito-all:2.0.2-beta")
    compile("com.jayway.restassured:rest-assured:2.6.0")
    compile("org.assertj:assertj-core:3.2.0")


}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
    provided.all*.exclude group: "javax.servlet"
}


dependencyManagement {
	imports { 
		mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.BUILD-SNAPSHOT" 
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.3"
}

flyway {
    url = "jdbc:postgresql://localhost:5432/mydrive"
    driver = "org.postgresql.Driver"
    user = "mydrive"
    password = "mydrive"
}

configurations {
    driver
}

dependencies {
    driver group: "org.postgresql", name: "postgresql", version: "9.4-1201-jdbc41"
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}

task migrateAll << {
    groovy.sql.Sql sql = groovy.sql.Sql.newInstance(
        "jdbc:postgresql://localhost:5432/mydrive",
        "mydrive",
        "mydrive",
        "org.postgresql.Driver"
    )
    
    def shell = new GroovyShell(buildscript.classLoader);
    sql.eachRow("select nspname from pg_namespace where nspname !~ '^pg_.*' and nspname != 'information_schema'") { row ->
        println "Update schema: $row.nspname"
        shell.run(file('groovy/MigrateTools.groovy'), "$row.nspname")
    }
}



sourceSets {
    unitTest {
        java.srcDir file('src/test/java/org/odesamama/mcd/repositories')
        resources.srcDir file('src/test/resources')
    }
}

//
//task check(overwrite: true) {
//    println('Check task is executed')
//    test {
//        java {
//            srcDirs = ["src/test/java/org/odesamama/mcd/repositories"]
//        }
//    }
//}

test {
    useTestNG()
    println('Check task is executed')
    exclude 'org/odesamama/**'
    include 'org/odesamama/mcd/repositories'
}